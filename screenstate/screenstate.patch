--- linux-2.6.24-palm/drivers/cpufreq/Kconfig	2011-02-28 17:03:32.000000000 -0500
+++ linux-2.6.24-uber/drivers/cpufreq/Kconfig	2011-02-28 22:27:07.000000000 -0500
@@ -87,6 +138,15 @@
 	  program shall be able to set the CPU dynamically without having
 	  to enable the userspace governor manually.
 
+config CPU_FREQ_DEFAULT_GOV_SCREENSTATE
+        bool "screenstate"
+        select CPU_FREQ_GOV_SCREENSTATE
+        help
+          Use the CPUFreq governor 'screenstate' as default. This will
+	  scale the CPU frequency down when the LCD is off then scale
+	  back to max speed when LCD is powered on.  This also will not
+	  allow to set the CPU frequency manually.
+
 config CPU_FREQ_DEFAULT_GOV_ONDEMAND
 	bool "ondemand"
 	select CPU_FREQ_GOV_ONDEMAND
@@ -149,6 +209,16 @@
 
 	  If in doubt, say Y.
 
+config CPU_FREQ_GOV_SCREENSTATE
+        tristate "'screenstate' governor for frequency scaling"
+        help
+          Enable this cpufreq governor to scale when LCD is on/off.
+
+          To compile this driver as a module, choose M here: the
+          module will be called cpufreq_screenstate.
+
+          If in doubt, say Y.
+
 config CPU_FREQ_GOV_ONDEMAND
 	tristate "'ondemand' cpufreq policy governor"
 	select CPU_FREQ_TABLE
--- linux-2.6.24-palm/drivers/cpufreq/Makefile	2008-01-24 17:58:37.000000000 -0500
+++ linux-2.6.24-uber/drivers/cpufreq/Makefile	2011-02-28 22:27:07.000000000 -0500
@@ -9,6 +9,7 @@
 obj-$(CONFIG_CPU_FREQ_GOV_USERSPACE)	+= cpufreq_userspace.o
 obj-$(CONFIG_CPU_FREQ_GOV_ONDEMAND)	+= cpufreq_ondemand.o
 obj-$(CONFIG_CPU_FREQ_GOV_CONSERVATIVE)	+= cpufreq_conservative.o
+obj-$(CONFIG_CPU_FREQ_GOV_SCREENSTATE)	+= cpufreq_screenstate.o

 # CPUfreq cross-arch helpers
 obj-$(CONFIG_CPU_FREQ_TABLE)		+= freq_table.o
--- linux-2.6.24-palm/include/linux/cpufreq.h	2011-02-28 17:03:32.000000000 -0500
+++ linux-2.6.24-uber/include/linux/cpufreq.h	2011-02-28 22:26:46.000000000 -0500
@@ -309,6 +309,9 @@
 #elif defined(CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE)
 extern struct cpufreq_governor cpufreq_gov_userspace;
 #define CPUFREQ_DEFAULT_GOVERNOR	(&cpufreq_gov_userspace)
+#elif defined(CONFIG_CPU_FREQ_DEFAULT_GOV_SCREENSTATE)
+extern struct cpufreq_governor cpufreq_gov_screenstate;
+#define CPUFREQ_DEFAULT_GOVERNOR	(&cpufreq_gov_screenstate)
 #elif defined(CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND)
 extern struct cpufreq_governor cpufreq_gov_ondemand;
 #define CPUFREQ_DEFAULT_GOVERNOR	(&cpufreq_gov_ondemand)
--- linux-2.6.24-palm/drivers/video/omap/lcd_panel.c	2011-02-28 17:03:32.000000000 -0500
+++ linux-2.6.24-uber/drivers/video/omap/lcd_panel.c	2011-02-28 22:26:46.000000000 -0500
@@ -31,6 +31,11 @@
 
 #include "lcd.h"
 
+#ifdef CONFIG_CPU_FREQ_GOV_SCREENSTATE
+void cpufreq_gov_screenstate_lcdon(void);
+void cpufreq_gov_screenstate_lcdoff(void);
+#endif
+
 #define MOD_NAME 		"LCD: "
 
 #undef MODDEBUG
@@ -52,7 +57,6 @@
 #define DISPLAY_BACKLIGHT_STATE_ON     1
 #define DISPLAY_BACKLIGHT_STATE_OFF    0
 
-
 struct lcd_params {
 	struct display_device *disp_dev;
 	struct platform_device *pdev;
@@ -128,6 +132,11 @@
 						DISPLAY_BACKLIGHT_STATE_ON);
 		}
 		params->panel_state = DISPLAY_DEVICE_STATE_ON;
+
+#ifdef CONFIG_CPU_FREQ_GOV_SCREENSTATE
+		cpufreq_gov_screenstate_lcdon();
+#endif
+
 	} else {
 		if (params->panel_state == DISPLAY_DEVICE_STATE_OFF) {
 			DPRINTK(" %s:  Panel already off, returning...\n",
@@ -156,6 +165,10 @@
 						DISPLAY_CONTROLLER_STATE_OFF);
 		}
 		params->panel_state = DISPLAY_DEVICE_STATE_OFF;
+
+#ifdef CONFIG_CPU_FREQ_GOV_SCREENSTATE
+		cpufreq_gov_screenstate_lcdoff();
+#endif
 	}
 
 unlock:
--- linux-2.6.24-palm/drivers/usb/gadget/gadget_event.c	2011-02-28 17:03:32.000000000 -0500
+++ linux-2.6.24-uber/drivers/usb/gadget/gadget_event.c	2011-02-28 22:26:46.000000000 -0500
@@ -362,6 +362,13 @@
 }
 EXPORT_SYMBOL(gadget_event_power_state_changed);
 
+#ifdef CONFIG_CPU_FREQ_GOV_SCREENSTATE
+int gadget_event_state_current(void) {
+	return the_state.current_mA;
+}
+EXPORT_SYMBOL(gadget_event_state_current);
+#endif
+
 static int __init init(void)
 {
 	int ret = 0;
--- linux-2.6.24-palm/drivers/w1/slaves/w1_ds2784.c	2011-02-28 17:03:32.000000000 -0500
+++ linux-2.6.24-uber/drivers/w1/slaves/w1_ds2784.c	2011-02-28 22:27:07.000000000 -0500
@@ -1151,11 +1160,20 @@
 	return ds2784_gettemperature_dev(battery_device, ret_temperature);
 }
 
+#ifdef CONFIG_CPU_FREQ_GOV_SCREENSTATE
+int ds2784_getcurrent(int *ret_current)
+{
+        if (!battery_device) return -1;
+        return ds2784_getcurrent_dev(battery_device, ret_current);
+}
+EXPORT_SYMBOL(ds2784_getcurrent);
+#else
 static int ds2784_getcurrent(int *ret_current)
 {
 	if (!battery_device) return -1;
 	return ds2784_getcurrent_dev(battery_device, ret_current);
 }
+#endif
 
 static struct battery_ops ds2784_battery_ops = {
 	.get_percent       = ds2784_getpercent,
--- linux-2.6.24-palm/arch/arm/mach-omap3pe/constraint.c	2011-02-28 17:03:31.000000000 -0500
+++ linux-2.6.24-uber/arch/arm/mach-omap3pe/constraint.c	2011-03-02 23:03:32.000000000 -0500
@@ -32,6 +32,11 @@
 #include <asm/arch/prcm.h>
 #include "prcm_opp.h"
 
+#ifdef CONFIG_CPU_FREQ_GOV_SCREENSTATE
+unsigned short cpufreq_screenstate_opp_settings(unsigned short *screenon,
+                                        unsigned short *screenoff);
+unsigned short cpufreq_screenstate_lcd_state();
+#endif
 
 /******************************************************************************
  *
@@ -333,6 +338,21 @@
 			return -1;
 		}
 	} else if (res->prcm_id == PRCM_VDD1_CONSTRAINT) {
+#ifdef CONFIG_CPU_FREQ_GOV_SCREENSTATE
+                unsigned short i=0,screenon,screenoff;
+                if(!cpufreq_screenstate_opp_settings(&screenon,&screenoff))
+                        goto out;
+                i=cpufreq_screenstate_lcd_state();
+                if(i && (target_value < screenon)) {
+                        printk(KERN_ERR "Invalid VDD1 OPP requested\n");
+                        return -1;
+                }
+                if(!i && (target_value > screenoff)) {
+                        printk(KERN_ERR "Invalid VDD1 OPP requested\n");
+                        return -1;
+                }
+out:
+#endif
 		if ((target_value < min_vdd1_opp) ||
 				(target_value > max_vdd1_opp)) {
 			printk(KERN_ERR "Invalid VDD1 OPP requested\n");
--- linux-2.6.24-palm/drivers/cpufreq/cpufreq_screenstate.c	1969-12-31 19:00:00.000000000 -0500
+++ linux-2.6.24-uber/drivers/cpufreq/cpufreq_screenstate.c	2011-03-02 23:06:27.000000000 -0500
@@ -0,0 +1,244 @@
+/*
+ *  linux/drivers/cpufreq/cpufreq_screenstate.c
+ *
+ *  Marco Benton marco@unixpsycho.com 
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/spinlock.h>
+#include <linux/interrupt.h>
+#include <linux/cpufreq.h>
+#include <linux/cpu.h>
+#include <linux/types.h>
+#include <linux/mutex.h>
+#include <asm/uaccess.h>
+#include <linux/workqueue.h>
+
+// Cap min freq capped to 500MHz, undef to set to policy->min
+//#define SCREENSTATE_CAP_MIN_FREQ
+
+static unsigned int cpu_is_managed=0;
+static unsigned int lcd_state;
+static unsigned int charging_state;
+
+int gadget_event_state_current(void);
+static int ds2784_getcurrent(int *ret_current);
+static inline void check_charger(struct work_struct *work);
+unsigned short get_vdd1_arm_opp_for_freq(unsigned int freq);
+unsigned short screen_off_opp,screen_on_opp;
+
+static DEFINE_MUTEX(screenstate_mutex);
+
+static DECLARE_DELAYED_WORK(dbs_work, check_charger);
+
+#ifdef CONFIG_CPU_FREQ_OVERRIDE
+u8 override_show_chrg_ovrd();
+u8 ch_override;
+#endif
+
+static inline void check_charger(struct work_struct *work) {
+	struct cpufreq_policy *policy = cpufreq_cpu_get(0);
+	int cur=0,current_mA=0;
+
+	mutex_lock(&screenstate_mutex);
+#ifdef CONFIG_CPU_FREQ_OVERRIDE
+	int oc = override_show_chrg_ovrd();
+
+	if((oc) && (!ch_override)) {
+		printk("screenstate: charger override set\n");
+		charging_state=0;
+		ch_override=1;
+		if(lcd_state) __cpufreq_driver_target(policy, policy->max,
+							CPUFREQ_RELATION_H);
+	}
+	else if((!oc) && (ch_override)) {
+		ch_override=0;
+		printk("screenstate: charger override off\n");
+	}
+
+	if(ch_override) goto out;
+#endif
+
+	ds2784_getcurrent(&cur);
+	current_mA=gadget_event_state_current();
+	if((cur>0) && (current_mA < 500)) {
+		// Assume Touchstone
+		if(!charging_state) {
+			charging_state=1;
+			__cpufreq_driver_target(policy, 500000,
+						CPUFREQ_RELATION_L);
+			printk("screenstate: TS found!\n");
+		}
+	} 
+	else {
+		if(current_mA == 1000) {
+			if(!charging_state) {
+				charging_state=1;
+				__cpufreq_driver_target(policy, 500000,
+							CPUFREQ_RELATION_L);
+				printk("screenstate: 1000mA charger found!\n");
+			}
+		}
+		else {
+			if(charging_state) {
+				charging_state=0;
+				printk("screenstate: charger unplugged!\n");
+				if(lcd_state)
+					__cpufreq_driver_target(policy,
+						policy->max, CPUFREQ_RELATION_H);
+			}
+		}
+	}
+#ifdef CONFIG_CPU_FREQ_OVERRIDE
+out:
+#endif
+	schedule_delayed_work(&dbs_work,1000);
+	mutex_unlock(&screenstate_mutex);
+	return;
+}
+
+static int cpufreq_governor_screenstate(struct cpufreq_policy *policy,
+				   unsigned int event) {
+
+	switch (event) {
+		case CPUFREQ_GOV_START:
+			if(cpu_is_managed) break;
+
+			cpu_is_managed = 1;
+			lcd_state = 1;
+			charging_state = 0;
+#ifdef CONFIG_CPU_FREQ_OVERRIDE
+			ch_override = override_show_chrg_ovrd();
+#endif
+			screen_off_opp=get_vdd1_arm_opp_for_freq(policy->min);
+			screen_on_opp=get_vdd1_arm_opp_for_freq(policy->max);
+
+			mutex_lock(&screenstate_mutex);
+			__cpufreq_driver_target(policy, policy->max,
+							CPUFREQ_RELATION_H);
+			schedule_delayed_work(&dbs_work,1000);
+			mutex_unlock(&screenstate_mutex);
+			
+			break;
+		case CPUFREQ_GOV_STOP:
+			cpu_is_managed = 0;
+			lcd_state = 0;
+#ifdef CONFIG_CPU_FREQ_OVERRIDE
+			ch_override = 0;
+#endif
+			cancel_delayed_work(&dbs_work);
+			break;
+		case CPUFREQ_GOV_LIMITS:
+			mutex_lock(&screenstate_mutex);
+			printk("screenstate: policy change\n");
+			screen_off_opp=get_vdd1_arm_opp_for_freq(policy->min);
+			screen_on_opp=get_vdd1_arm_opp_for_freq(policy->max);
+			if(charging_state)
+				__cpufreq_driver_target(policy, 500000,
+							CPUFREQ_RELATION_L);
+			else {
+				if(lcd_state) __cpufreq_driver_target(policy,
+					policy->max, CPUFREQ_RELATION_H);
+#ifdef SCREENSTATE_CAP_MIN_FREQ
+				else __cpufreq_driver_target(policy, 500000,
+							CPUFREQ_RELATION_L);
+#else
+				else __cpufreq_driver_target(policy,
+					policy->min, CPUFREQ_RELATION_L);
+#endif
+			}
+			mutex_unlock(&screenstate_mutex);
+			break;
+		}
+		return 0;
+}
+
+struct cpufreq_governor cpufreq_gov_screenstate = {
+	.name		= "screenstate",
+	.governor	= cpufreq_governor_screenstate,
+	.owner		= THIS_MODULE,
+};
+
+static int __init cpufreq_gov_screenstate_init(void) {
+	return cpufreq_register_governor(&cpufreq_gov_screenstate);
+}
+
+static void __exit cpufreq_gov_screenstate_exit(void) {
+	flush_scheduled_work();
+	cpufreq_unregister_governor(&cpufreq_gov_screenstate);
+}
+
+void cpufreq_gov_screenstate_lcdoff(void) {
+	struct cpufreq_policy *policy = cpufreq_cpu_get(0);
+	mutex_lock(&screenstate_mutex);
+	if(cpu_is_managed) {
+		printk("screenstate: lcd off\n");
+		lcd_state = 0;
+#ifdef SCREENSTATE_CAP_MIN_FREQ
+		__cpufreq_driver_target(policy, 500000, CPUFREQ_RELATION_L);
+#else
+		__cpufreq_driver_target(policy, policy->min, CPUFREQ_RELATION_L);
+#endif
+	}
+	mutex_unlock(&screenstate_mutex);
+}
+EXPORT_SYMBOL(cpufreq_gov_screenstate_lcdoff);
+
+void cpufreq_gov_screenstate_lcdon(void) {
+	struct cpufreq_policy *policy = cpufreq_cpu_get(0);
+	mutex_lock(&screenstate_mutex);
+        if(cpu_is_managed) {
+		printk("screenstate: lcd on\n");
+		lcd_state = 1;
+                if(!charging_state) __cpufreq_driver_target(policy,
+					policy->max, CPUFREQ_RELATION_H);
+		else __cpufreq_driver_target(policy, 500000, CPUFREQ_RELATION_L);
+        }
+	mutex_unlock(&screenstate_mutex);
+}
+EXPORT_SYMBOL(cpufreq_gov_screenstate_lcdon);
+
+unsigned short cpufreq_screenstate_lcd_state() {
+        if(cpu_is_managed) {
+                return lcd_state;
+        }
+        else return 0;
+}
+EXPORT_SYMBOL(cpufreq_screenstate_lcd_state);
+
+unsigned short cpufreq_screenstate_opp_settings(unsigned short *screenon,
+                                        unsigned short *screenoff) {
+        if(cpu_is_managed) {
+                *(screenon)=(screen_on_opp > 0 && screen_on_opp < 8)
+                                                        ? screen_on_opp : 0;
+                *(screenoff)=(screen_off_opp > 0 && screen_off_opp < 8)
+                                                        ? screen_off_opp : 0;
+		if(charging_state) {
+			*(screenon)=3;
+			*(screenoff)=3;
+		}
+                if(!screen_on_opp || !screen_on_opp) return 0;
+        }
+        else return 0; 
+}
+EXPORT_SYMBOL(cpufreq_screenstate_opp_settings);
+
+EXPORT_SYMBOL(cpufreq_gov_screenstate);
+
+MODULE_AUTHOR ("marco@unixpsycho.com");
+MODULE_DESCRIPTION ("CPUfreq policy governor 'screenstate'");
+MODULE_LICENSE ("GPL");
+
+#ifdef CONFIG_CPU_FREQ_DEFAULT_GOV_SCREENSTATE
+fs_initcall(cpufreq_gov_screenstate_init);
+#else
+module_init(cpufreq_gov_screenstate_init);
+#endif
+module_exit(cpufreq_gov_screenstate_exit);

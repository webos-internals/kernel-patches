diff --git a/block/Kconfig.iosched b/block/Kconfig.iosched
index 3199b76..fcc4677 100644
--- a/block/Kconfig.iosched
+++ b/block/Kconfig.iosched
@@ -34,7 +34,15 @@ config IOSCHED_CFQ
 
 	  This is the default I/O scheduler.
 
-	  Note: If BLK_CGROUP=m, then CFQ can be built only as module.
+config IOSCHED_SIO
+	tristate "Simple I/O scheduler"
+	default y
+	---help---
+	  The Simple I/O scheduler is an extremely simple scheduler that
+	  does basic merging and no sorting. It is aimed for usage in
+	  aleatory access devices like SSD, USB flash devices, etc.
+	  It differences synchronous requests from asynchronous ones for
+	  better interactibility.
 
 config CFQ_GROUP_IOSCHED
 	bool "CFQ Group Scheduling support"
@@ -56,6 +64,9 @@ choice
 	config DEFAULT_CFQ
 		bool "CFQ" if IOSCHED_CFQ=y
 
+	config DEFAULT_SIO
+		bool "SIO" if IOSCHED_SIO=y
+
 	config DEFAULT_NOOP
 		bool "No-op"
 
@@ -65,6 +76,7 @@ config DEFAULT_IOSCHED
 	string
 	default "deadline" if DEFAULT_DEADLINE
 	default "cfq" if DEFAULT_CFQ
+	default "sio" if DEFAULT_SIO
 	default "noop" if DEFAULT_NOOP
 
 endmenu
diff --git a/block/Makefile b/block/Makefile
index 0bb499a..a0e978f 100644
--- a/block/Makefile
+++ b/block/Makefile
@@ -12,6 +12,7 @@ obj-$(CONFIG_BLK_CGROUP)	+= blk-cgroup.o
 obj-$(CONFIG_IOSCHED_NOOP)	+= noop-iosched.o
 obj-$(CONFIG_IOSCHED_DEADLINE)	+= deadline-iosched.o
 obj-$(CONFIG_IOSCHED_CFQ)	+= cfq-iosched.o
+obj-$(CONFIG_IOSCHED_SIO)	+= sio-iosched.o
 
 obj-$(CONFIG_BLOCK_COMPAT)	+= compat_ioctl.o
 obj-$(CONFIG_BLK_DEV_INTEGRITY)	+= blk-integrity.o
diff --git a/block/sio-iosched.c b/block/sio-iosched.c
new file mode 100644
index 0000000..308e2a7
--- /dev/null
+++ b/block/sio-iosched.c
@@ -0,0 +1,206 @@
+/*
+ * Simple IO scheduler
+ *
+ * Copyright (C) 2010 Miguel Boton <mboton@gmail.com>
+ */
+
+#include <linux/blkdev.h>
+#include <linux/elevator.h>
+#include <linux/bio.h>
+#include <linux/module.h>
+#include <linux/init.h>
+
+/* tunables */
+static const int sync_expire = HZ / 2;
+static const int async_expire = 5 * HZ;
+
+/* scheduler data */
+struct sio_data {
+	/* fifo queues */
+	struct list_head fifo_list[2];
+
+	/* fifo expire */
+	int fifo_expire[2];
+};
+
+/* constants */
+#define SYNC	0
+#define ASYNC	1
+
+static void
+sio_merged_requests(struct request_queue *q, struct request *rq,
+		    struct request *next)
+{
+	list_del_init(&next->queuelist);
+}
+
+static void
+sio_add_request(struct request_queue *q, struct request *rq)
+{
+	struct sio_data *sd = q->elevator->elevator_data;
+	int sync = rq_is_sync(rq);
+
+	rq_set_fifo_time(rq, jiffies + sd->fifo_expire[sync]);
+	list_add_tail(&rq->queuelist, &sd->fifo_list[sync]);
+}
+
+static int
+sio_queue_empty(struct request_queue *q)
+{
+	struct sio_data *sd = q->elevator->elevator_data;
+
+	return list_empty(&sd->fifo_list[SYNC]) &&
+	       list_empty(&sd->fifo_list[ASYNC]);
+}
+
+static struct request *
+sio_expired_request(struct sio_data *sd, int sync)
+{
+	struct request *rq;
+
+	if (list_empty(&sd->fifo_list[sync]))
+		return NULL;
+
+	rq = rq_entry_fifo(sd->fifo_list[sync].next);
+
+	/* expired request */
+	if (time_after(jiffies, rq_fifo_time(rq)))
+		return rq;
+
+	return NULL;
+}
+
+static struct request *
+sio_choose_expired_request(struct sio_data *sd)
+{
+	struct request *sync = sio_expired_request(sd, SYNC);
+	struct request *async = sio_expired_request(sd, ASYNC);
+
+	/* check expired requests */
+	if (sync && async)
+		return async;
+	else if (sync)
+		return sync;
+
+	return async;
+
+}
+
+static struct request *
+sio_choose_request(struct sio_data *sd)
+{
+	if (!list_empty(&sd->fifo_list[SYNC]))
+		return rq_entry_fifo(sd->fifo_list[SYNC].next);
+
+	if (!list_empty(&sd->fifo_list[ASYNC]))
+		return rq_entry_fifo(sd->fifo_list[ASYNC].next);
+
+	return NULL;
+}
+
+static int
+sio_dispatch_requests(struct request_queue *q, int force)
+{
+	struct sio_data *sd = q->elevator->elevator_data;
+	struct request *rq;
+
+	rq = sio_choose_expired_request(sd);
+	if (!rq) {
+		rq = sio_choose_request(sd);
+		if (!rq)
+			return 0;
+	}
+
+	list_del_init(&rq->queuelist);
+	elv_dispatch_sort(q, rq);
+
+	return 1;
+}
+
+static struct request *
+sio_former_request(struct request_queue *q, struct request *rq)
+{
+	struct sio_data *sd = q->elevator->elevator_data;
+	struct list_head *queue = &sd->fifo_list[rq_is_sync(rq)];
+
+	if (rq->queuelist.prev == queue)
+		return NULL;
+
+	return list_entry(rq->queuelist.prev, struct request, queuelist);
+}
+
+static struct request *
+sio_latter_request(struct request_queue *q, struct request *rq)
+{
+	struct sio_data *sd = q->elevator->elevator_data;
+	struct list_head *queue = &sd->fifo_list[rq_is_sync(rq)];
+
+	if (rq->queuelist.next == queue)
+		return NULL;
+
+	return list_entry(rq->queuelist.next, struct request, queuelist);
+}
+
+static void *
+sio_init_queue(struct request_queue *q)
+{
+	struct sio_data *sd;
+
+	sd = kmalloc_node(sizeof(*sd), GFP_KERNEL, q->node);
+	if (!sd)
+		return NULL;
+
+	INIT_LIST_HEAD(&sd->fifo_list[SYNC]);
+	INIT_LIST_HEAD(&sd->fifo_list[ASYNC]);
+
+	sd->fifo_expire[SYNC] = sync_expire;
+	sd->fifo_expire[ASYNC] = async_expire;
+
+	return sd;
+}
+
+static void
+sio_exit_queue(struct elevator_queue *e)
+{
+	struct sio_data *sd = e->elevator_data;
+
+	BUG_ON(!list_empty(&sd->fifo_list[SYNC]));
+	BUG_ON(!list_empty(&sd->fifo_list[ASYNC]));
+
+	kfree(sd);
+}
+
+static struct elevator_type elevator_sio = {
+	.ops = {
+		.elevator_merge_req_fn		= sio_merged_requests,
+		.elevator_dispatch_fn		= sio_dispatch_requests,
+		.elevator_add_req_fn		= sio_add_request,
+		.elevator_queue_empty_fn	= sio_queue_empty,
+		.elevator_former_req_fn		= sio_former_request,
+		.elevator_latter_req_fn		= sio_latter_request,
+		.elevator_init_fn		= sio_init_queue,
+		.elevator_exit_fn		= sio_exit_queue,
+	},
+	.elevator_name = "sio",
+	.elevator_owner = THIS_MODULE,
+};
+
+static int __init sio_init(void)
+{
+	elv_register(&elevator_sio);
+
+	return 0;
+}
+
+static void __exit sio_exit(void)
+{
+	elv_unregister(&elevator_sio);
+}
+
+module_init(sio_init);
+module_exit(sio_exit);
+
+
+MODULE_AUTHOR("Miguel Boton");
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Simple IO scheduler");
